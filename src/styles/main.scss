// Variables

//////////////////////////////
// Rem functions and mixins //
//////////////////////////////
$base-font-size: 100% !default;
//$base-line-height: 150%;

// It strips the unit of measure and returns it
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

$rem-base: strip-unit($base-font-size*0.16) * 1px;

@function convert-to-rem($value, $base-value: $rem-base)  {
    $value: strip-unit($value) / strip-unit($base-value) * 1rem;
    @if ($value == 0rem) { $value: 0; } // Turn 0em into 0
    @return $value;
}

@function rem-calc($values, $base-value: $rem-base) {
    $max: length($values);

    @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

    $remValues: ();
    @for $i from 1 through $max {
        $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
    }
    @return $remValues;
}

@mixin rem-fallback($property, $values...) {
    $max: length($values);
    $pxValues: '';
    $remValues: '';

    @for $i from 1 through $max {
        $value: strip-unit(nth($values, $i));
        $pxValues: #{$pxValues + $value}px;

        @if $i < $max {
            $pxValues: #{$pxValues + " "};
        }
    }

    @for $i from 1 through $max {
        $value: rem-calc(nth($values, $i));
        $remValues: #{$remValues + $value};

        @if $i < $max {
            $remValues: #{$remValues + " "};
        }
    }

    #{$property}: $pxValues;
    #{$property}: $remValues;
}


/////////////////
// Breakpoints //
/////////////////
$breakpoints: (
    xs:  0px,
    sm:  568px,
    md:  768px,
    lg:  1200px,
    xl:  1600px,
    xxl: 1920px,
);
$breakpoint-classes: (sm md lg);
$page-width: map-get($breakpoints, lg);

//////////
// Grid //
//////////
$columns: 12;

$gutter-size: 20px;
$gutter-half: ($gutter-size/2);

$fluid-gutter-size: 2%;
$fluid-gutter-half: ($fluid-gutter-size/2);

$fluid-gutter-vert-size: 2vh;
$fluid-gutter-vert-half: ($fluid-gutter-vert-size/2);

$page-pad: 10px;
$grid-pad: 10px;
$block-pad: 10px;

// Make col/row widths/heights
@for $i from 1 through $columns {
    @for $j from 1 through $columns {
        .pk.w-#{$i}-#{$j} {
            width: ((($i/$j) * 100%)-$fluid-gutter-size);
        }

        .pk.v-#{$i}-#{$j} {
            height: ($i/$j) * 100vh;
        }

        .pk.h-#{$i}-#{$j} {
            height: ((($i/$j) * 100%)-$fluid-gutter-vert-size);
        }
    }
}

$alignments: (
    start: flex-start,
    end: flex-end,
    center: center,
    baseline: baseline,
    stretch: stretch,
    inherit: inherit
);

$justifications: (
    start: flex-start,
    end: flex-end,
    center: center,
    around: space-around,
    between: space-between,
    inherit: inherit
);

/////////////////
// Backgrounds //
/////////////////

$body-bg:  #eee;
$page-bg:  #ddd;
$grid-bg:  #ccc;
$block-bg: #bbb;


////////////
// Styles //
////////////
body {
    background-color: $body-bg;
}

// Page (to be removed?)
.pk.page {
    max-width: $page-width;
    margin: 0 auto;
    background-color: $page-bg;
    box-sizing: border-box;
    @include rem-fallback(padding, $page-pad);
}

// Grid
.pk.grid {
    display: flex;
    background-color: $grid-bg;
    @include rem-fallback(padding, $grid-pad);

    @each $prop-name, $prop-val in $alignments {
        &.pk.align-#{$prop-name} {
            align-items: $prop-val;
        }
    }

    @each $prop-name, $prop-val in $justifications {
        &.pk.justify-#{$prop-name} {
            justify-content: $prop-val;
        }
    }

    &.pk.no-gutter {
        margin: 0;
    }

    .no-flexbox &:after {
        content: "";
        display: table;
        clear: both;
    }
}

.pk.grid-vertical {
    @extend .grid;
    flex-direction: column;
}

.pk.grid-reverse {
    @extend .grid;
    flex-direction: row-reverse;
    &.pk.grid-vertical {
        flex-direction: column-reverse;
    }
}

.pk.grid-vertical-reverse {
    @extend .grid-vertical;
    flex-direction: column-reverse;
}

// Block
.pk.block {
    box-sizing: border-box;
    background-color: $block-bg;
    word-wrap: break-word;
    @include rem-fallback(padding, $block-pad);

    margin: $fluid-gutter-vert-half $fluid-gutter-half;

    flex: 0 1 auto;

    @each $prop-name, $prop-val in $alignments {
        &.pk.align-#{$prop-name} {
            align-self: $prop-val;
        }
    }

    &.pk.no-gutter {
        margin: 0;
    }

    .no-flexbox & {
        float: left;
    }
}

.pk.no-gutter {
    margin: 0;
}
