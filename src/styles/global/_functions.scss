@function convert-to-rem($value, $base-value: $rem-base)  {
    $value: strip-unit($value) / strip-unit($base-value) * 1rem;
    @if ($value == 0rem) { $value: 0; } // Turn 0em into 0
    @return $value;
}

@function rem-calc($values, $base-value: $rem-base) {
    $max: length($values);

    @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

    $remValues: ();
    @for $i from 1 through $max {
        $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
    }
    @return $remValues;
}

// It strips the unit of measure and returns it
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// Remove the first selector character (#, ., etc) from the class name or ID
@function remove-selector($selector) {
    @return str-slice($selector, 2, str-length($selector));
}

// Generate a class name and apply an optional prefix
@function class-name($class, $prefix: $namespace, $selector: ".") {
    $name: $class;

    @if str_slice($class, 1, 1) == $selector {
        $name: remove-selector($name);
    }

    @if $prefix != "" {
        $name: $prefix + $name;
    }

    @return $selector + $name;
}

// Format a class name into the BEM format
@function bem($block: "", $element: "", $modifier: "", $element-separator: $bem-element-separator, $modifier-separator: $bem-modifier-separator) {
    $name: $block;

    @if $element != "" {
        $name: $name + $element-separator + $element;
    }

    @if $modifier != "" {
        $name: $name + $modifier-separator + $modifier;
    }

    @return $name;
}
