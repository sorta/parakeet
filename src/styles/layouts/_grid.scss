
@import "grid/functions";
@import "grid/variables";
@import "grid/mixins";

// Make col/row widths/heights
.flex-grow-0 {
    flex-grow: 0;
}
.flex-shrink-0 {
    flex-shrink: 0;
}

@for $i from 1 through $columns {
    .grow-#{$i} {
        flex-grow: $i;
    }

    .shrink-#{$i} {
        flex-shrink: $i;
    }

    @for $j from 1 through $columns {
        .basis-#{$i}-#{$j} {
            flex-basis: ((($i/$j) * 100%)-$fluid-gutter-size);

            &.no-gutter { flex-basis: (($i/$j) * 100%); }
            &.no-gutter-vertical { flex-basis: (($i/$j) * 100%); }
            &.no-gutter-horizontal { flex-basis: (($i/$j) * 100%); }
        }

        .width-#{$i}-#{$j} {
            width: ((($i/$j) * 100%)-$fluid-gutter-size);

            &.no-gutter {  width: (($i/$j) * 100%); }
            &.no-gutter-horizontal { width: (($i/$j) * 100%); }
        }

        .view-width-#{$i}-#{$j} {
            width: ((($i/$j) * 100vw)-$fluid-gutter-view-width-size);

            &.no-gutter {  width: (($i/$j) * 100vw); }
            &.no-gutter-horizontal { width: (($i/$j) * 100vw); }
        }

        .height-#{$i}-#{$j} {
            height: ((($i/$j) * 100%)-$fluid-gutter-size);

            &.no-gutter {  height: (($i/$j) * 100%); }
            &.no-gutter-vertical { height: (($i/$j) * 100%); }
        }

        .view-height-#{$i}-#{$j} {
            height: ((($i/$j) * 100vh)-$fluid-gutter-view-height-size);

            &.no-gutter {  height: (($i/$j) * 100vh); }
            &.no-gutter-vertical { height: (($i/$j) * 100vh); }
        }
    }
}

// Page (to be removed?)
.page {
    @include rem-fallback(padding, $page-pad);
    max-width: $page-width;
    margin: 0 auto;
    box-sizing: border-box;
}

// Grid
.grid {
    @include rem-fallback(padding, $grid-pad);

    box-sizing: border-box;
    display: flex;
    flex-flow: row wrap;

    @each $prop-name, $prop-val in $alignments {
        &.align-#{$prop-name} {
            align-items: $prop-val;
        }
    }

    @each $prop-name, $prop-val in $justifications {
        &.justify-#{$prop-name} {
            justify-content: $prop-val;
        }
    }

    &.no-gutter {
        @include gutter(0);
    }

    &.no-gutter-vertical {
        @include gutter-vert(0);
    }

    &.no-gutter-horizontal {
        @include gutter-horiz(0);
    }

    .no-flexbox &:after {
        content: "";
        display: table;
        clear: both;
    }
}

.grid-inline {
    display: inline-flex;
}

.grid-vertical {
    @extend .grid;
    flex-direction: column;
}

.grid-reverse {
    @extend .grid;
    flex-direction: row-reverse;
    &.grid-vertical {
        flex-direction: column-reverse;
    }
}

.grid-vertical-reverse {
    @extend .grid-vertical;
    flex-direction: column-reverse;
}

.grid-wrap {
    flex-wrap: wrap;
}

.grid-nowrap {
    flex-wrap: nowrap;
}

.grid-wrap-reverse {
    flex-wrap: wrap-reverse;
}

// Block
.block {
    @include rem-fallback(padding, $block-pad);
    @include gutter($fluid-gutter-half);

    box-sizing: border-box;
    position: relative;
    word-wrap: break-word;
    flex: 0 1 auto;

    @each $prop-name, $prop-val in $alignments {
        &.align-self-#{$prop-name} {
            align-self: $prop-val;
        }
    }

    &.no-gutter {
        @include gutter(0);
    }

    &.no-gutter-vertical {
        @include gutter-vert(0);
    }

    &.no-gutter-horizontal {
        @include gutter-horiz(0);
    }

    .no-flexbox & {
        float: left;
    }
}

.no-gutter {
    @include gutter(0);
}

.no-gutter-vertical {
    @include gutter-vert(0);
}

.no-gutter-horizontal {
    @include gutter-horiz(0);
}
