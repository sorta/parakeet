
@import "grid/functions";
@import "grid/variables";
@import "grid/mixins";

// Make col/row widths/heights
.pk.flex-grow-0 {
    flex-grow: 0;
}
.pk.flex-shrink-0 {
    flex-shrink: 0;
}

@for $i from 1 through $columns {
    .pk.grow-#{$i} {
        flex-grow: $i;
    }

    .pk.shrink-#{$i} {
        flex-shrink: $i;
    }

    @for $j from 1 through $columns {
        .pk.basis-#{$i}-#{$j} {
            flex-basis: ((($i/$j) * 100%)-$fluid-gutter-size);
        }

        .pk.width-#{$i}-#{$j} {
            width: ((($i/$j) * 100%)-$fluid-gutter-size);
        }

        .pk.view-width-#{$i}-#{$j} {
            height: ($i/$j) * 100vw;
        }

        .pk.height-#{$i}-#{$j} {
            height: ((($i/$j) * 100%)-$fluid-gutter-size);
        }

        .pk.view-height-#{$i}-#{$j} {
            height: ($i/$j) * 100vh;
        }
    }
}

// Page (to be removed?)
.pk.page {
    @include rem-fallback(padding, $page-pad);
    max-width: $page-width;
    margin: 0 auto;
    box-sizing: border-box;
}

// Grid
.pk.grid {
    @include rem-fallback(padding, $grid-pad);

    box-sizing: border-box;
    display: flex;
    flex-flow: row wrap;

    @each $prop-name, $prop-val in $alignments {
        &.pk.align-#{$prop-name} {
            align-items: $prop-val;
        }
    }

    @each $prop-name, $prop-val in $justifications {
        &.pk.justify-#{$prop-name} {
            justify-content: $prop-val;
        }
    }

    &.pk.no-gutter {
        margin: 0;
    }

    .pk.no-gutter-vertical {
        margin-top: 0;
        margin-bottom: 0;
    }

    .pk.no-gutter-horizontal {
        margin-left: 0;
        margin-right: 0;
    }

    .no-flexbox &:after {
        content: "";
        display: table;
        clear: both;
    }
}

.pk.grid-vertical {
    @extend .grid;
    flex-direction: column;
}

.pk.grid-reverse {
    @extend .grid;
    flex-direction: row-reverse;
    &.pk.grid-vertical {
        flex-direction: column-reverse;
    }
}

.pk.grid-vertical-reverse {
    @extend .grid-vertical;
    flex-direction: column-reverse;
}

.pk.grid-wrap {
    flex-wrap: wrap;
}

.pk.grid-nowrap {
    flex-wrap: nowrap;
}

.pk.grid-wrap-reverse {
    flex-wrap: wrap-reverse;
}

// Block
.pk.block {
    @include rem-fallback(padding, $block-pad);

    box-sizing: border-box;
    position: relative;
    word-wrap: break-word;
    margin: $fluid-gutter-half $fluid-gutter-half;

    flex: 0 1 auto;

    @each $prop-name, $prop-val in $alignments {
        &.pk.align-self-#{$prop-name} {
            align-self: $prop-val;
        }
    }

    &.pk.no-gutter {
        margin: 0;
    }

    .pk.no-gutter-vertical {
        margin-top: 0;
        margin-bottom: 0;
    }

    .pk.no-gutter-horizontal {
        margin-left: 0;
        margin-right: 0;
    }

    .no-flexbox & {
        float: left;
    }
}

.pk.no-gutter {
    margin: 0;
}

.pk.no-gutter-vertical {
    margin-top: 0;
    margin-bottom: 0;
}

.pk.no-gutter-horizontal {
    margin-left: 0;
    margin-right: 0;
}
